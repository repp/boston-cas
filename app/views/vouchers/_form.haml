= simple_form_for @subprogram, url: bulk_update_program_sub_program_vouchers_path, html: {class: 'bulk-vouchers'}  do |f|
  = f.error_notification
  .table-responsive.margin-top-03
    %table.table.table-condensed
      %thead
        %tr
          %th.vouchers--available
            Available
          - if @subprogram.has_buildings?
            %th.vouchers--building
              = "#{Building.model_name.human}"
            %th.vouchers--unit
              Unit
          %th.vouchers--date_available
            Date Available
          %th
            Status
          %th
            Client
      %tbody
        = f.simple_fields_for :vouchers, @vouchers do |v|
          - disabled = false
          - # disable the form fields if we have a successful or active match
          - default_building_id = v.object.building.try(:id)
          - default_unit_id = v.object.unit.try(:id)
          - default_unit_name = v.object.unit.try(:name)
          - if v.object.status_match.present?
            - disabled = true
          %tr
            %td.text-center
              = v.input_field :available, disabled: disabled, as: :boolean
            - if @subprogram.has_buildings?
              %td
                = v.input_field :building_id, collection: Building.all, selected: default_building_id, disabled: disabled, class: 'has-dependent'
              %td
                .row
                  .col-sm-2
                    = link_to 'Add', new_program_sub_program_unit_for_building_path(@program, @subprogram, building_id: v.object.building.try(:id)), data: {loads_in_pjax_modal: true}, class: 'jAddUnit'
                    = link_to 'Edit', edit_program_sub_program_unit_for_building_path(program_id: @program.id, sub_program_id: @subprogram.id, id: 1), data: {loads_in_pjax_modal: true}, class: 'jEditUnit'
                  .col-sm-10
                    = v.association :unit, collection: v.object.units, disabled: disabled, input_html: {data: {dependent: true, url: '/buildings/:id/available_units.json', 'value-method' => :id, 'label-method' => :name, default_parent_id: default_building_id, default_value: default_unit_id, default_label: default_unit_name}, class: "sub_program_vouchers_attributes_#{v.index}_building_id jUnit", style: "width: 100%;"}, label: false
            %td
              .input-group.date
                = v.input_field :date_available, disabled: disabled, as: :date_picker, value: v.object.date_available
            %td
              - if v.object.status_match.present?
                - can_see_details_of_this_match = ClientOpportunityMatch.accessible_by_user(current_user).where(id: v.object.status_match.id).present? rescue false
                - if can_see_details_of_this_match
                  = link_to v.object.status_match.overall_status, match_path(v.object.status_match)
                - else
                  = v.object.status_match.overall_status
                - if v.object.status_match.active? && can_reject_matches?
                  %br
                  = link_to unavailable_program_sub_program_voucher_path(@subprogram.program, @subprogram, v.object), class: 'btn btn-secondary btn-xs', method: :delete, data: {confirm: "Stoping this match will remove anyone in the match and make the voucher unavailable.  There will be NO notifications.  This should only be used when a voucher was made available incorrectly. Are you sure you want to stop the match?"} do
                    Stop Match

            %td
              - if v.object.status_match.present? 
                - if can_view_all_matches?
                  = link_to client_path(v.object.status_match.client) do
                    = v.object.status_match.client_name_for_contact current_contact, hidden: hide_client_names && ! params[:confidential_override].present?
                - else
                  = v.object.status_match.client_name_for_contact current_contact, hidden: hide_client_names && ! params[:confidential_override].present?
              
          - if v.object.errors.any?
            %tr
              %td(style="border: none; color:red; position: relative; top: -30px;")
              %td(colspan="5" style="border: none; color:red; position: relative; top: -30px;")
                = v.object.errors.full_messages_for(:base).join ', '   

    = f.button :submit, value: 'Update Vouchers'
= content_for :page_js do
  :javascript
    $('select').select2();
    $('.bulk-vouchers').on('change', '.has-dependent', function() {
      var parent = this.id
      var id = this.value
      var $child = $('.' + parent);
      var value_method = $child.data('value-method');
      var label_method = $child.data('label-method');
      var url = $child.data('url').replace(':id', id);
      $.get(url, function(data) {
        // remove previous options
        $child.children('option:gt(0)').remove();
        $.each(data, function(k,v){
          $child.append($('<option />').attr('value', v[value_method]).text(v[label_method]));
        });
        
        if($child.data('default-parent-id') == id) {
          $child.append('<option value="' + $child.data('default-value') + '">' + $child.data('default-label') + '</option>')
          // restore the original value if still available
          $child.val($child.data('default-value'));
        }
      }, 'json');
    });
    $('.sub_program_vouchers_unit').on('change', '.jUnit', function (e) {
      if($(this).val() == '') {
        $(this).closest('.row').find('.jAddUnit').show();
        $(this).closest('.row').find('.jEditUnit').hide();
      }
      else {
        $(this).closest('.row').find('.jAddUnit').hide();
        var jUnit = $(this).closest('.row').find('.jEditUnit');
        var href = jUnit.attr('href').replace(/\/unit_for_building\/\d+\/edit/, '/unit_for_building/' + $(this).val() + '/edit');
        jUnit.attr('href', href)
        jUnit.show();
      }
    });
    $('.jUnit').trigger('change');