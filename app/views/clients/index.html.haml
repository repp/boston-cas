
.row
  .col-sm-12
    %h1= t '.title'
- @prompt = t '.search_prompt'
.row
  .col-sm-6
    = render 'search_form'
- if Client.parked.any?
  .alert.alert-warning
    %p.icon-warning
      = "Some clients are parked. "
      = link_to 'See all parked clients.', reports_parked_clients_path
.row.table-utilities
  .col-sm-12
    %p= page_entries_info @clients
    :ruby
      binary_bits = ['veteran', 'chronic_homeless', 'physical_disability', 'developmental_disability', 'chronic_health_problem', 'hiv_aids', 'domestic_violence', 'substance_abuse_problem', 'mental_health_problem']
      columns = ['last_name', 'first_name', 'calculated_first_homeless_night', 'dupe', 'available', 'date_of_birth', 'gender', 'ssn']
      columns.concat binary_bits
      directions = current_sort_order(Hash[columns.map {|x| [x, nil]}])
      titles = {}
      directions.each {| k,v | titles[k] = @clients.human_attribute_name(k)}
      #titles['id'].upcase!
      titles['ssn'].upcase!
      titles['date_of_birth'] = 'Age'
      titles['hiv_aids'].upcase!
      titles['calculated_first_homeless_night'] = "First Homeless Night"
      titles['mental_health_problem'] = 'Mental Health Disability'
.row
  .col-sm-12
    .table-responsive
      %table.table.table__init-cap-header
        %thead
          %tr
            %th Matches
            - titles.each do | k, title |
              %th{class: directions[k]? "sort-#{directions[k]}" : ""}
                = sort_link(titles[k], k, directions)
                -if directions[k].present?
                  %i{:class => ["fa", "fa-sort-#{directions[k]}"] }
        %tbody
          - @clients.each do |client|
            %tr
              %td.text-right
                = link_to client_matches_path(client) do
                  .badge.badge-success= @matches[client.id]
              %td
                = link_to client_path(client) do
                  = client.last_name
                  = client_data_quality client, :name
              %td
                = link_to client_path(client) do
                  = client.first_name
                  = client_data_quality client, :name
              %td
                = client.calculated_first_homeless_night.try(:strftime, I18n.t('date.formats.default'))
              %td
                - if client.merged_into
                  %a{data: {toggle: 'tooltip', placement: 'top'}, title: "Merged into #{client.merged_with_name}"}
                    = link_to client_path(client.merged_into) do
                      %span.icon-shrink2
              %td
                = checkmark client.available
              %td
                %nobr
                  - if client.date_of_birth.present?
                    = client.age 
                  - else
                    unknown
                  = client_data_quality client, :date_of_birth
              %td
                = client.gender.try(:text)
              %td
                %nobr
                  = masked_ssn client.ssn
                  = client_data_quality client, :ssn
              - binary_bits.each do |bit|
                %th.text-center= checkmark client.send(bit)

    %p= paginate @clients, params: {sort: directions.compact.keys.first, direction: directions.compact.values.first}
